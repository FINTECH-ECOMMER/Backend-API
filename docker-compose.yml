version: "3"
services:
  backend-db:
    build:
      context: ./docker/db
      dockerfile: .
    user: root
    restart: unless-stopped
    environment:
      SA_PASSWORD: "${DB_PASSWORD}"
      ACCEPT_EULA: "Y"
      MSSQL_PID: "${MSSQL_PID}"
      MSSQL_DB: "${DB_NAME}"
    ports:
      - "${SQL_PORT}:1433"
    volumes:
      - './docker/volumes/sqlserver/data:/var/opt/mssql/data'
      - './docker/volumes/sqlserver/log:/var/opt/mssql/log'
      - './docker/volumes/sqlserver/backup:/var/opt/mssql/backup'
    networks:
      - finecomm-network
  cache-redis:
    image: redis:7.0-alpine
    restart: on-failure
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - './docker/volumes/redis:/data'
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - finecomm-network
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: on-failure
    environment:
      REDIS_HOST: cache-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      HTTP_USER: ${REDIS_COMMANDER_HTTP_USER}
      HTTP_PASSWORD: ${REDIS_COMMANDER_HTTP_PASSWORD}
    depends_on:
      - cache-redis
    ports:
      - "${REDIS_COMMANDER_PORT}:8081"
    networks:
      - finecomm-network
  rabbitmq:
    image: rabbitmq:3.9.11-management-alpine
    container_name: 'rabbitmq'
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASSWORD}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_UI_PORT}:15672"
    volumes:
      - './docker/volumes/rabbitmq/data:/var/lib/rabbitmq/'
      - './docker/volumes/rabbitmq/log/:/var/log/rabbitmq'
    networks:
      - finecomm-network
    restart: on-failure

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "${ZIPKIN_PORT}:9411"
    networks:
      - finecomm-network
    restart: unless-stopped

  postgres-db:
    image: postgres:14-alpine
    ports:
      - "${POSTGRES_DB_PORT}:5432"
    volumes:
      - './docker/volumes/postgres/data:/var/lib/postgresql/data'
      - './docker/volumes/postgres/log:/var/log/postgresql'
      - './docker/volumes/postgres/backup:/var/backup/postgresql'
    #      - ./utils/migrations/dbinit.sql:/docker-entrypoint-initdb.d/dbinit.sql
    restart: on-failure
    environment:
      POSTGRES_USER: ${POSTGRES_DB_USER}
      POSTGRES_PASSWORD: ${POSTGRES_DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_DB_USER -d $POSTGRES_DB_NAME" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - finecomm-network

  pgadmin:
    image: dpage/pgadmin4:6.3
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "${PGADMIN_LISTEN_PORT}:80"
    depends_on:
      - postgres-db
    networks:
      - finecomm-network
volumes:
  mssql-data:
networks:
  finecomm-network:
    driver: bridge